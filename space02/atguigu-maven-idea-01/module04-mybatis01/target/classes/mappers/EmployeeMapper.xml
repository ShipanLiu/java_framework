<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在Java程序中，必须找到当前的Mapper配置文件，才能进一步找到这里配置的SQL语句 -->
<!-- Java程序就是通过mapper标签的namespace属性找到当前Mapper配置文件 -->
<!--namespace 就是给一个配置文件取名， 随便找一个名字-->
<!-- 将来为了让一个Java接口，直接对应这个Mapper配置文件，通常使用Java接口的全类名作为这个namespace属性的值 -->
<!-- 以前我们叫dao，现在叫mapper，本质上都是持久化层的类型，只是命名习惯的区别 -->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">

    <!-- select语句使用select标签 -->
    <!-- insert语句使用insert标签 -->
    <!-- update语句使用update标签 -->
    <!-- delect语句使用delect标签 -->

    <!-- 在select标签中编写一条select语句实现查询效果 -->
    <!-- id属性：这条SQL语句的唯一标识， 为了定位这个失去了语句 -->
    <!-- resultType属性：Mybatis负责解析结果集，将解析得到的数据封装到Java类型中。resultType属性就是指定这个Java类型 -->
    <select id="selectEmpById" resultType="com.atguigu.mybatis.entity.Emp">
        <!-- #{empId}这里是为了方便接收Java程序传过来的参数数据 -->
        <!-- ， 之前用的是 ？ ， 现在服从mybatis 的规范， Mybatis负责将#{empId}部分转换为"?"占位符 -->
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t01
        where emp_id=#{empID}
    </select>

    <!--对应的是 interface EmployeeMapper 里面的 int insertEmp(Emp emp); -->
    <!-- 现在在这条SQL语句中，#{}中的表达式需要被用来从Emp emp实体类中获取emp_name的值、emp_salary的值 -->
    <!-- 而我们从实体类中获取值通常都是调用getXxx()方法 -->
    <!-- 而getXxx()方法、setXxx()方法定义了实体类的属性 -->
    <!-- 定义属性的规则是：把get、set去掉，剩下部分首字母小写 -->
    <!-- 所以我们在#{}中使用getXxx()方法、setXxx()方法定义的属性名即可(就是使用 empName and empSalary) -->
    <insert id="insertEmp">
        insert into t01 (emp_name, emp_salary) values (#{empName}, #{empSalary})
    </insert>


    <delete id="deleteById">
        delete from t01 where emp_id=#{empId}
    </delete>

    <update id="updateById">
        update t01 set emp_name=#{empName},emp_salary=#{empSalary} where emp_id=#{empId}
    </update>


    <!--采用注解的方式， we use annotations-->
    <update id="updateEmployeeWithAnnotation">
        update t01 set emp_salary=#{diySalary} where emp_name=#{diyName}
    </update>

    <!--采用 Map的方式-->
    <update id="updateEmployeeWithMap">
        update t01 set emp_name=#{key_empName}, emp_salary=#{key_empSalary} where emp_id=#{key_empId}
    </update>

    <!--Integer selectCount()-->
    <select id="selectCount" resultType="Integer">
        select count(*) from t01
    </select>

    <!--return a entity class object-->
    <!-- 这里的别名要和 在Emp 对象中的 属性名称 一致   -->
    <!-- 或者你不写别名， 因为在 mybatis-config.xml中的settings 里面规定了  emp-name  <===> empName  以后数据库的命名
     要时刻注意-->
    <select id="returnOneEmp" resultType="com.atguigu.mybatis.entity.Emp">
        select emp_id empId, emp_name empName, emp_salary empSalary from t01 where emp_id=#{select_id}
    </select>

    <!--if you return a Map,  Map<String, Object> returnMap(Integer select_id);-->
    <!--mybatis会自动 将mysql的字段名 作为 key，  字段值作为value 存入 Map 里面-->
    <select id="returnMap" resultType="Map">
        select * from t01 where emp_id=#{select_id}
    </select>


    <!--这个用的多， 当返回好几个 user 的时候， 放到list 里面-->
    <!-- List<Emp> returnList();-->
    <select id="returnList" resultType="com.atguigu.mybatis.entity.Emp">
        select * from t01
    </select>

</mapper>